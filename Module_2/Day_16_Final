#include <iostream>
#include <queue>
using namespace std;

struct TreeNode  {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x) , left(NULL), right(NULL)   {}
};

TreeNode* constructBinaryTree(int arr[], int n) {
    if(n==0) return NULL;
    
    TreeNode* root = new TreeNode(arr[0]);
    queue<TreeNode*> q;
    q.push(root);
    
    int i=1;
    while(!q.empty() && i<n) {
        TreeNode* node = q.front();
        q.pop();
        
        if(i<n) {
            node->left = new TreeNode(arr[i]);
            q.push(node->left);
            i++;
        }
        
        if(i<n) {
            node->right =new TreeNode(arr[i]);
            q.push(node->right);
            i++;
        }
    }
    return root;
}

bool isPerfect(TreeNode* root) {
    if(root==NULL) return true;
    
    queue<TreeNode*> q;
    q.push(root);
    int level = -1;
    
    while(!q.empty()) {
        int size =q.size();
        level++;
        
        if((1<<level) !=size) {
            return false;
        }
        
        for(int i=0;i<size;i++) {
            TreeNode* node = q.front();
            q.pop();
            
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
        }
    }
    
    return true;
}

int main() {
    int N;cin>>N;
    
    int values[N];
    for(int i=0;i<N;i++) {
    cin>>values[i];
    }
    
    TreeNode* root = constructBinaryTree(values, N);
    
    if(isPerfect(root)) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }
    
    return 0;
}
